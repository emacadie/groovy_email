apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'groovy'
apply plugin: 'codenarc'
apply plugin: 'com.github.tkruse.groovysh'
apply plugin: 'application'

repositories {
  mavenCentral()
  jcenter()
}

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.tkruse.gradle:gradle-groovysh-plugin:1.0.6'
    }
}

allprojects {
    dependencies {
        testCompile 'junit:junit:4.10'
        testCompile 'org.mockito:mockito-all:[1.8.5,)'
        // From Maven, it's GroupId:ArtifactId:Version 
        testCompile 'org.spockframework:spock-core:1.0-groovy-2.4'
        testCompile 'cglib:cglib-nodep:3.1'
        testCompile 'org.apache.directory.studio:org.apache.commons.io:2.4'
        // dependencies used by examples in this project (not required for using Spock)
        // testRuntime "com.h2database:h2:1.2.147"
    
        // logging
        // Using sfl4j allows us to replace different loggers later, if desired
        compile group: 'org.slf4j', name:'slf4j-api', version: '1.7.2'
        // sfl4j is just a facade for loggers. To get logging to work, tie it in with an implementation, e.g., logback
        compile group: 'ch.qos.logback', name:'logback-classic', version: '1.1.3'
        compile group: 'ch.qos.logback', name:'logback-core', version: '1.1.3'
    
        compile 'org.codehaus.groovy:groovy-all:2.4.0'
        compile 'dnsjava:dnsjava:2.1.7'
        compile 'org.postgresql:postgresql:9.3-1101-jdbc41'
        compile 'org.apache.shiro:shiro-core:1.2.3'
        compile 'commons-cli:commons-cli:1.2'
        compile 'org.codehaus.gpars:gpars:1.2.1'
    }
    
    tasks.withType( GroovyCompile ) { GroovyCompile compile ->
        compile.options.debug = true
        compile.options.compilerArgs = [
        '-Xlint:deprecation',
        '-Xlint:unchecked'
        // '-implicit:class',
        // '-Awarns', '-Xmaxwarns', '10000',
        // '-J-Xbootclasspath/p:$CHECKERS/binary/jsr308-all.jar',
        // '-processor', 'checkers.nullness.NullnessChecker',
        // '-Xbootclasspath/p:$CHECKERS/jdk/jdk.jar',	
        // '-version'
        ]
    }

}

task hello  {
    println 'Hello world!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!'
}

test {
    maxParallelForks = 5
    forkEvery = 50
    // this will make it run the test every time you run 'gradle test'
    outputs.upToDateWhen { false }
    // from https://github.com/mvcatsifma/spring-ctx-props-file/blob/master/build.gradle
    // use this to set the database prepare/teardown props
    systemProperties = System.getProperties()
    systemProperties[ 'foo' ] = 'bar'
    doFirst {
        println "Hello +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
        // if ( systemProperties[ 'database.prep' ] == 'true' || systemProperties['database.teardown'] == 'true' ) {
            systemProperties[ 'dbname' ]        = 'gemail_test_db'
            systemProperties[ 'host_and_port' ] = 'localhost:5432'
            systemProperties[ 'dbuser' ]        = 'gemail_test'
            systemProperties[ 'dbpassword' ]    = 'dev-word-to-pass002'
        // }
    }
    doLast {
        println "System.properties[ 'database.prep' ]: ${System.properties[ 'database.prep' ]}"
        println "systemProperties[ 'database.prep' ]: ${systemProperties[ 'database.prep' ]}"
        println "systemProperties[ 'database.teardown' ]: ${systemProperties[ 'database.teardown' ]}"
        println "goodbye ------------------------------------------------------------------------------"
    }
}

// :compileTestGroovy', task ':processTestResources', task ':testClasses', task ':test',

task runJava( type: JavaExec ) {
    println( "-- Groovy version: " + groovy.lang.GroovySystem.getVersion() )
    dependsOn classes
    description = 'Run gradle.sample.SampleApp'
    // Java main class to execute.
    if ( rootProject.hasProperty("mainClass") ) {
        main = mainClass
    } else {
        main = 'org.lookup'
    }
    // We need to set the classpath.
    classpath sourceSets.main.runtimeClasspath
    // Extra options can be set.
    systemProperty 'sysProp', 'notUsed'
    println System.properties['iterations'] 
    // systemProperty 'iterations', System.getProperty('iterations')
    systemProperty 'iterations', System.properties['iterations'] 
    // you can use this if nothing is set via command line
    // systemProperties = System.getProperties()
    jvmArgs '-server'
    // We can pass arguments to the main() method
    // of gradle.sample.SampleApp.
    if ( rootProject.hasProperty( "mainArgs" ) ) {     
        args = mainArgs.tokenize() // args wants a List, so split by spaces if need be
    } 
}

task runGroovy( type: JavaExec ) {
    println( "-- Groovy version: " + groovy.lang.GroovySystem.getVersion() )
    dependsOn classes
    description = 'Run gradle.sample.SampleApp'
    // main class to execute.
    if ( rootProject.hasProperty( "mainClass" ) ) {
        main = mainClass
    } else {
        main = 'org.lookup'
    }
    // We need to set the classpath.
    classpath sourceSets.main.runtimeClasspath
    // Extra options can be set.
    systemProperty 'sysProp', 'notUsed'
    jvmArgs '-client'
    if ( rootProject.hasProperty( "mainArgs" ) ) {
        args = mainArgs.tokenize() // args wants a List, so split by spaces if need be
    } 
}

task showProperties {
    doLast {
        println "Version: $version"
        println "Custom property: $customProperty"
    }
}

// you can type "gradle console" and get a console with all your classes
task( console, dependsOn: 'classes', type: JavaExec ) {
    main = 'groovy.ui.Console'
    classpath = sourceSets.main.runtimeClasspath
}

groovysh {
    // groovyVersion determines the features of the shell and buildShell tasks.
    // groovyVersion = '2.4.0'
        // false to disable the shell task
    enableAppShell = true
    // false to disable the shell task
    enableBuildShell = true
    // false to disable the buildDevShell task
    enableBuildDevShell = true
    shell{ 
        System.properties[ 'dbname' ]        = 'gemail_test_db'
        System.properties['host_and_port' ] = 'localhost:5432'
        System.properties[ 'dbuser' ]        = 'gemail_test'
        System.properties[ 'dbpassword' ]    = 'dev-word-to-pass002'
    }
}

task createMailRunnerStartScript( type: CreateStartScripts ) {
    println "In MailRunnerStartScript"
    println "Here is sourceSets.main.runtimeClasspath: ${sourceSets.main.runtimeClasspath}"
    println "Here is sourceSets.main: ${sourceSets.main}"
    outputDir = file( 'build/scripts' )
    mainClassName = 'info.shelfunit.mail.MailRunner'
    applicationName = 'MailRunner'
    classpath = sourceSets.main.runtimeClasspath
    // classpath = files('path/to/some.jar')
}

task createUserInserterStartScript( type: CreateStartScripts ) {
    outputDir = file( 'build/scripts' )
    mainClassName = 'info.shelfunit.mail.UserInserter'
    applicationName = 'UserInserter'
    classpath = sourceSets.main.runtimeClasspath
    // classpath = files('path/to/some.jar')
}

mainClassName = "info.shelfunit.mail.MailRunner"

// 