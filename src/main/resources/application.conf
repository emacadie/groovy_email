smtp {
    server.name = "shelfunit.info"
    server.port = 25
    other.domains = [ "austiniswhereilive.com", "groovy-is-groovy.com" ]
}

postoffice {
    server.port = 110
}

akka {
    // this is a comment
    // Akka version, checked against the runtime version of Akka.
    // version = "2.1.4"
     
    // Home directory of Akka, modules in the deploy directory will be loaded
    home = ""
     
    // Event handlers to register at boot time (Logging$DefaultLogger logs to STDOUT)
    // ORIG: event-handlers = ["akka.event.Logging$DefaultLogger"]
    // something about the work "event" with a hyphen
    // or hyphens/dashes in general
    // event_handlers=["akka.event.Logging$DefaultLogger"]
     
    // Event handlers are created and registered synchronously during ActorSystem
    // start-up, and since they are actors, this timeout is used to bound the
    // waiting time
    // event.handler.startup.timeout = 5s
     
    // Log level used by the configured loggers (see "event-handlers") as soon
    // as they have been started; before that, see "stdout-loglevel"
    // Options: OFF, ERROR, WARNING, INFO, DEBUG
    loglevel = "INFO"
     
    // Log level for the very basic logger activated during AkkaApplication startup
    // Options: OFF, ERROR, WARNING, INFO, DEBUG
    stdout.loglevel = "WARNING"
     
    // Log the complete configuration at INFO level when the actor system is started.
    // This is useful when you are uncertain of what configuration is used.
    log.config.on.start = off
     
    // List FQCN of extensions which shall be loaded at actor system startup.
    // Should be on the format: 'extensions = ["foo", "bar"]' etc.
    // See the Akka Documentation for more info about Extensions
    // extensions = [] // orig - i think empty map might be causing problems
    // extensions=["one", "two"] 
    // Toggles whether threads created by this ActorSystem should be daemons or not
    daemonic = off
     
    // JVM shutdown, System.exit(-1), in case of a fatal error,
    // such as OutOfMemoryError
    jvm.exit.on.fatal.error = on
     
    actor {
     
        // FQCN of the ActorRefProvider to be used; the below is the built-in default,
        // another one is akka.remote.RemoteActorRefProvider in the akka-remote bundle.
        provider = "akka.actor.LocalActorRefProvider"
         
        // The guardian "/user" will use this class to obtain its supervisorStrategy.
        // It needs to be a subclass of akka.actor.SupervisorStrategyConfigurator.
        // In addition to the default there is akka.actor.StoppingSupervisorStrategy.
        // guardian.supervisor.strategy = "akka.actor.DefaultSupervisorStrategy"
         
        // Timeout for ActorSystem.actorOf
        // ORIG: creation.timeout = 20s // no good
        // creation.timeout = 20 s // no good
        // This works: creation.timeout = "20s"
        creation.timeout = "20s"
         
        // Frequency with which stopping actors are prodded in case they had to be
        // removed from their parents
        // reaper.interval = 5s
         
        // Serializes and deserializes (non-primitive) messages to ensure immutability,
        // this is only intended for testing.
        // serialize.messages = off
         
        // Serializes and deserializes creators (in Props) to ensure that they can be
        // sent over the network, this is only intended for testing.
        // serialize.creators = off
         
        // Timeout for send operations to top-level actors which are in the process
        // of being started. This is only relevant if using a bounded mailbox or the
        // CallingThreadDispatcher for a top-level actor.
        // unstarted.push.timeout = 10s
         
        typed {
            // Default timeout for typed actor methods with non-void return type
            // timeout = 5s
        }

    }

}

