https://www.linode.com/docs/databases/postgresql/
https://www.linode.com/docs/databases/postgresql/ubuntu-12-04-precise-pangolin

apt-get install postgresql postgresql-contrib
passwd postgres
su - postgres
psql -d template1 -c "ALTER USER postgres WITH PASSWORD 'changeme';"

sudo -u postgres psql postgres
create user gemail_dev with password 'dev-word-to-pass001';
create database gemail_dev_db with owner gemail_dev;
grant all privileges on database gemail_dev_db to gemail_dev;

psql -h localhost -U gemail_dev -d gemail_dev_db

create user gemail_test with password 'dev-word-to-pass002';
create database gemail_test_db with owner gemail_test;
grant all privileges on database gemail_test_db to gemail_test;

psql -h localhost -U gemail_test -d gemail_test_db


http://stackoverflow.com/questions/9789736/how-to-implement-a-many-to-many-relationship-in-postgresql
CREATE TABLE product (
  product_id serial8 PRIMARY KEY  -- implicit primary key constraint
, product    text NOT NULL
, price      numeric NOT NULL DEFAULT 0
);

CREATE TABLE bill (
  bill_id  serial8 PRIMARY KEY
, bill     text NOT NULL
, billdate date NOT NULL DEFAULT now()::date
);

CREATE TABLE bill_product (
  bill_id    int REFERENCES bill (bill_id) ON UPDATE CASCADE ON DELETE CASCADE
, product_id int REFERENCES product (product_id) ON UPDATE CASCADE
, amount     numeric NOT NULL DEFAULT 1
  -- explicit pk
, CONSTRAINT bill_product_pkey PRIMARY KEY (bill_id, product_id)
);

pg_dump --no-acl --no-owner -h localhost -U active_gwudev --data-only active_gw_dev_001 > table.dump
: psql -h localhost -U shro_dev -d shro_grls_dev_001

pg_dump --no-acl --no-owner -h localhost -U shro_dev shro_grls_dev_001 --schema-only --table=book > book.table.dump
create user shro_dev with password 'active-stand-12';

http://www.neilconway.org/docs/sequences/
SELECT currval(pg_get_serial_sequence('users', 'id'));


CREATE TABLE email_user (
    userid serial primary key NOT NULL,
    username character varying(64) not null unique,
    password_hash character varying(150) not null,
    password_algo character varying(32) not null,
    first_name character varying(30) not null,
    last_name character varying(30) not null,
    version bigint NOT NULL
);
def db = [url: "jdbc:mysql://$props.host_and_port/$props.dbname?useUnicode=true&characterEncoding=UTF-8",
          user: props.dbuser, password: props.dbpassword, driver: 'com.mysql.jdbc.Driver']
def sql = Sql.newInstance(db.url, db.user, db.password, db.driver)
println "DB connection ready"

def db = [url: "jdbc:postgresql://localhost:5432/shro_grls_dev_002",
          user: props.dbuser, password: props.dbpassword, driver: 'org.postgresql.Driver']
def sql = Sql.newInstance(db.url, db.user, db.password, db.driver)
println "DB connection ready"
----
2015-08-07: installing postgresql-contrib to get pgcrypto extension
CREATE EXTENSION pgcrypto;
ERROR:  permission denied to create extension "pgcrypto"
HINT:  Must be superuser to create this extension.
Installing modules: http://stackoverflow.com/questions/1564056/how-do-i-import-modules-or-install-extensions-in-postgres-8-4
https://blog.starkandwayne.com/2015/05/23/uuid-primary-keys-in-postgresql/
http://www.postgresql.org/docs/current/static/uuid-ossp.html
sudo -u postgres psql gemail_dev_db
CREATE EXTENSION pgcrypto;
No good.
Try:
CREATE EXTENSION "uuid-ossp"; -> do this as root. I do not know if you need the contrib package to do this.

"id UUID PRIMARY KEY DEFAULT uuid_generate_v4()" might be the winner

CREATE SCHEMA IF NOT EXISTS snw;  
CREATE TABLE contactsB(  
   id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
   name TEXT,
   email TEXT
);

INSERT INTO contactsB (name,email) VALUES  
('Dr Nic Williams','drnic'),
('Brian Mattal','brian'),
('Wayne E. Seguin','wayneeseguin'),
('Long Nguyen','long'),
('Bill Chapman','bill'),
('Chris Weibel','chris'),
('Jeremey Budnack','jrbudnack'),
('Ruben Koster','rkoster'),
('Jamie Van Dyke','jamie'),
('Quintessence Anx','qanx'),
('McGowan','mcg'),
('高，秀娇 (XJ)','xj'),
('Geoff Franks','geoff'),
('Van Nguyen','vnguyen'),
('John Longanecker','jlonganecker')
;

https://jdbc.postgresql.org/documentation/80/binary-data.html
UUID.randomUUID().toString()

gemail_test_db=> insert into mail_store(id, username, from_address, to_address, text_body) values ('c315a08c-1a04-4f2d-9dac-223a237f4e95', 'alexander', 'oneill@stargate.mil', 'alexander@shelfunit.info', 'The next meeting of the board of directors will be on Tuesday.
John.');
in shell:
import groovy.sql.*
db = [ url: "jdbc:postgresql://localhost:5432/gemail_test_db", user: 'gemail_test', password: 'dev-word-to-pass002', driver: 'org.postgresql.Driver' ]
sql = Sql.newInstance( db.url, db.user, db.password, db.driver )
ff= sql.


